<template>
    <table class="table table-bordered text-center mt-1">
        <thead>
            <tr>
                <th>Mon</th>
                <th>Tue</th>
                <th>Wed</th>
                <th>Thu</th>
                <th>Fri</th>
                <th>Sat</th>
                <th>Sun</th>
            </tr>
        </thead>
        <tbody>
            <tr v-for="(week, weekIndex) in calendarRows" :key="weekIndex">
                <td v-for="(day, index) in week" :key="index" :class="{
                    'bg-primary text-white': isToday(day),
                    'weekend': index >= 5,
                }" class="day-cell" @click="handleDayClick(day)">
                    <div class="cell-content">
                        <div class="d-flex justify-content-between align-items-center">
                            <b>{{ day }}</b>
                            <i v-if="index < 6 && day" class="fa-solid fa-user-check text-success"></i>
                        </div>
                        <div class="d-flex justify-content-between align-items-center text-success"
                            v-if="index < 6 && day">
                            <span>In: {{ getCheckInOut(day).checkIn }}</span>
                            <span>Out: {{ getCheckInOut(day).checkOut }}</span>
                        </div>
                    </div>
                </td>
            </tr>
        </tbody>
    </table>
</template>

<script setup>
import { computed } from "vue";

const props = defineProps(["month", "year"]);
const tasks = [
    { date: "2024-11-01", checkIn: "9:00", checkOut: "18:00" },
    { date: "2024-11-03", checkIn: "10:00", checkOut: "17:00" },
];

const daysInMonth = (month, year) => new Date(year, month, 0).getDate();
const firstDayOfMonth = computed(() => new Date(props.year, props.month - 1, 1).getDay());
const calendarRows = computed(() => {
    const days = [];
    const totalDays = daysInMonth(props.month, props.year);
    let week = new Array(firstDayOfMonth.value === 0 ? 6 : firstDayOfMonth.value - 1).fill("");
    for (let day = 1; day <= totalDays; day++) {
        week.push(day);
        if (week.length === 7) {
            days.push(week);
            week = [];
        }
    }
    if (week.length > 0) {
        while (week.length < 7) {
            week.push("");
        }
        days.push(week);
    }
    return days;
});

const isToday = (day) => {
    const today = new Date();
    return (
        day &&
        today.getDate() === day &&
        today.getMonth() + 1 === props.month &&
        today.getFullYear() === props.year
    );
};

const getCheckInOut = (day) => {
    if (!day) return { checkIn: "", checkOut: "" };
    const task = tasks.find(
        (task) => task.date === `${props.year}-${String(props.month).padStart(2, "0")}-${String(day).padStart(2, "0")}`
    );
    return task ? { checkIn: task.checkIn, checkOut: task.checkOut } : { checkIn: "8:30", checkOut: "17:30" };
};

const handleDayClick = (day) => {
    if (!day) return;
    console.log(`Ngày được chọn: ${day}-${props.month}-${props.year}`);
};
</script>

<style scoped>
.table-bordered {
    border: 2px solid black;
}

th {
    background-color: #343a40;
    color: white;
}

td.day-cell {
    width: 100px;
    height: 100px;
    vertical-align: top;
    padding: 8px 12px;
    cursor: pointer;
    border: 2px solid  black;
}

.cell-content {
    height: 100%;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
}

.weekend {
    background-color: #f8d7da;
    color: #721c24;
    border: 2px solid #dc3545;
    /* Viền đậm hơn */
}

.bg-primary {
    background-color: #007bff !important;
}

.text-white {
    color: #ffffff !important;
}

span,
.fa-solid {
    font-size: 14px;
}
</style>